// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	null "github.com/guregu/null/v5"
)

const createThing = `-- name: CreateThing :execresult
INSERT INTO things (
  address, type, created, description, reason, remove
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type CreateThingParams struct {
	Address     string
	Type        ThingsType
	Created     time.Time
	Description string
	Reason      string
	Remove      time.Time
}

func (q *Queries) CreateThing(ctx context.Context, arg CreateThingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createThing,
		arg.Address,
		arg.Type,
		arg.Created,
		arg.Description,
		arg.Reason,
		arg.Remove,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  name, email
) VALUES (
  ?, ?
)
`

type CreateUserParams struct {
	Name  string
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Name, arg.Email)
}

const deleteThing = `-- name: DeleteThing :exec
DELETE FROM things
WHERE id = ?
`

func (q *Queries) DeleteThing(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteThing, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const extendRemoval = `-- name: ExtendRemoval :execresult
UPDATE things
SET remove = ?, warned1 = NULL, warned2 = NULL
WHERE id = ?
`

type ExtendRemovalParams struct {
	Remove time.Time
	ID     uint32
}

func (q *Queries) ExtendRemoval(ctx context.Context, arg ExtendRemovalParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, extendRemoval, arg.Remove, arg.ID)
}

const firstWarningSent = `-- name: FirstWarningSent :execresult
UPDATE things
SET warned1 = ?
WHERE id = ?
`

type FirstWarningSentParams struct {
	Warned1 null.Time
	ID      uint32
}

func (q *Queries) FirstWarningSent(ctx context.Context, arg FirstWarningSentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, firstWarningSent, arg.Warned1, arg.ID)
}

const getThingByAddressType = `-- name: GetThingByAddressType :one
SELECT id, address, type, created, description, reason, remove, warned1, warned2, removed FROM things
WHERE address = ? AND type = ? LIMIT 1
`

type GetThingByAddressTypeParams struct {
	Address string
	Type    ThingsType
}

func (q *Queries) GetThingByAddressType(ctx context.Context, arg GetThingByAddressTypeParams) (Thing, error) {
	row := q.db.QueryRowContext(ctx, getThingByAddressType, arg.Address, arg.Type)
	var i Thing
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.Type,
		&i.Created,
		&i.Description,
		&i.Reason,
		&i.Remove,
		&i.Warned1,
		&i.Warned2,
		&i.Removed,
	)
	return i, err
}

const getThingByID = `-- name: GetThingByID :one
SELECT id, address, type, created, description, reason, remove, warned1, warned2, removed FROM things
WHERE id = ? LIMIT 1
`

func (q *Queries) GetThingByID(ctx context.Context, id uint32) (Thing, error) {
	row := q.db.QueryRowContext(ctx, getThingByID, id)
	var i Thing
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.Type,
		&i.Created,
		&i.Description,
		&i.Reason,
		&i.Remove,
		&i.Warned1,
		&i.Warned2,
		&i.Removed,
	)
	return i, err
}

const listSubscribers = `-- name: ListSubscribers :many
SELECT user_id, thing_id FROM subscribers
WHERE thing_id = ?
`

func (q *Queries) ListSubscribers(ctx context.Context, thingID uint32) ([]Subscriber, error) {
	rows, err := q.db.QueryContext(ctx, listSubscribers, thingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscriber
	for rows.Next() {
		var i Subscriber
		if err := rows.Scan(&i.UserID, &i.ThingID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptions = `-- name: ListSubscriptions :many
SELECT user_id, thing_id FROM subscribers
WHERE user_id = ?
`

func (q *Queries) ListSubscriptions(ctx context.Context, userID uint32) ([]Subscriber, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscriber
	for rows.Next() {
		var i Subscriber
		if err := rows.Scan(&i.UserID, &i.ThingID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listThingsAsc = `-- name: ListThingsAsc :many
SELECT id, address, type, created, description, reason, remove, warned1, warned2, removed FROM things
ORDER BY
CASE ? WHEN 'address' THEN address
       WHEN 'type' THEN type
       WHEN 'created' THEN created
       WHEN 'reason' THEN reason
       WHEN 'remove' THEN remove
       ELSE remove END ASC
`

func (q *Queries) ListThingsAsc(ctx context.Context, dollar_1 interface{}) ([]Thing, error) {
	rows, err := q.db.QueryContext(ctx, listThingsAsc, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thing
	for rows.Next() {
		var i Thing
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Type,
			&i.Created,
			&i.Description,
			&i.Reason,
			&i.Remove,
			&i.Warned1,
			&i.Warned2,
			&i.Removed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listThingsByType = `-- name: ListThingsByType :many
SELECT id, address, type, created, description, reason, remove, warned1, warned2, removed FROM things
WHERE type = ?
ORDER BY address
`

func (q *Queries) ListThingsByType(ctx context.Context, type_ ThingsType) ([]Thing, error) {
	rows, err := q.db.QueryContext(ctx, listThingsByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thing
	for rows.Next() {
		var i Thing
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Type,
			&i.Created,
			&i.Description,
			&i.Reason,
			&i.Remove,
			&i.Warned1,
			&i.Warned2,
			&i.Removed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listThingsDesc = `-- name: ListThingsDesc :many
SELECT id, address, type, created, description, reason, remove, warned1, warned2, removed FROM things
ORDER BY
CASE ? WHEN 'address' THEN address
       WHEN 'type' THEN type
       WHEN 'created' THEN created
       WHEN 'reason' THEN reason
       WHEN 'remove' THEN remove
       ELSE remove END DESC
`

func (q *Queries) ListThingsDesc(ctx context.Context, dollar_1 interface{}) ([]Thing, error) {
	rows, err := q.db.QueryContext(ctx, listThingsDesc, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thing
	for rows.Next() {
		var i Thing
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Type,
			&i.Created,
			&i.Description,
			&i.Reason,
			&i.Remove,
			&i.Warned1,
			&i.Warned2,
			&i.Removed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reset = `-- name: Reset :exec
DELETE FROM things
`

func (q *Queries) Reset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, reset)
	return err
}

const resetUsers = `-- name: ResetUsers :exec
DELETE FROM users
`

func (q *Queries) ResetUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsers)
	return err
}

const secondWarningSent = `-- name: SecondWarningSent :execresult
UPDATE things
SET warned2 = ?
WHERE id = ?
`

type SecondWarningSentParams struct {
	Warned2 null.Time
	ID      uint32
}

func (q *Queries) SecondWarningSent(ctx context.Context, arg SecondWarningSentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, secondWarningSent, arg.Warned2, arg.ID)
}

const subscribe = `-- name: Subscribe :execresult
INSERT INTO subscribers (
  user_id, thing_id
) VALUES (
  ?, ?
)
`

type SubscribeParams struct {
	UserID  uint32
	ThingID uint32
}

func (q *Queries) Subscribe(ctx context.Context, arg SubscribeParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, subscribe, arg.UserID, arg.ThingID)
}

const unsubscribe = `-- name: Unsubscribe :exec
DELETE FROM subscribers
WHERE user_id = ? AND thing_id = ?
`

type UnsubscribeParams struct {
	UserID  uint32
	ThingID uint32
}

func (q *Queries) Unsubscribe(ctx context.Context, arg UnsubscribeParams) error {
	_, err := q.db.ExecContext(ctx, unsubscribe, arg.UserID, arg.ThingID)
	return err
}

const updateDescription = `-- name: UpdateDescription :execresult
UPDATE things
SET description = ?
WHERE id = ?
`

type UpdateDescriptionParams struct {
	Description string
	ID          uint32
}

func (q *Queries) UpdateDescription(ctx context.Context, arg UpdateDescriptionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateDescription, arg.Description, arg.ID)
}
